@page
@model IndexModel
@using Humanizer
@{
	ViewData["Title"] = "Index";
}


@foreach (var blogPost in Model.BlogPosts)
{

	<div>
		<h1>
			<a asp-page="./IndividualBlogPost" asp-route-id="@blogPost.Id">@blogPost.Title</a>
		</h1>
		<div>This post was published: @blogPost.PublishedAt.Humanize()</div>
		<div>@blogPost.Body</div>

		<div>
			@if (blogPost.Tags == null)
			{
				<div>
					<p>This blog post has no tags</p>
				</div>
			}
			else
			{
				@foreach (var tag in blogPost.Tags)
				{
					<a class="badge badge-primary"
					   asp-page="./IndividualBlogPost"
					   asp-route-id="@tag.BlogPostId">
						@tag.Name
					</a>
				}
			}

		</div>
	</div>
	<br>
	<div class="comment-container">
		@if (blogPost.Comments == null)
		{
			<div>
				<p>This blog post has no comments</p>
			</div>
		}
		else
		{
			@foreach (var comment in blogPost.Comments)
			{
				<div style="text-align: left">
					<hr />
					<p>@comment.Body</p>
					<small>@comment.PublishedAt</small>
				</div>
			}
		}
	</div>
}

@{
	var prevDisabled = !Model.BlogPosts.HasPreviousPage ? "disabled" : "";
	var nextDisabled = !Model.BlogPosts.HasNextPage ? "disabled" : "";
}

<a asp-page="./Index"
	asp-route-pageIndex="@(Model.BlogPosts.PageIndex - 1)"
	class="btn btn-primary @prevDisabled">
	Previous
</a>
<a asp-page="./Index"
	asp-route-pageIndex="@(Model.BlogPosts.PageIndex + 1)"
	class="btn btn-primary @nextDisabled">
	Next
</a>

